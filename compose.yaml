version: '3.8'

services:
  # Application Services
  frontend:
    build: 
      context: ./Frontend
    networks:
      - hospital-net
    ports:
      - "3000:3000"
    depends_on:
      - backend

  db:
    image: postgres:15
    restart: always
    networks:
      - hospital-net
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data


  backend:
    build: 
      context: ./Backend
    networks:
      - hospital-net
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      - db
      - xray-machine
      - heart-monitor
      - mri-scanner
      - ultrasound
      - infusion-pump



  # IoT Simulation Services
  xray-machine:
    build: 
      context: ./IoT-Simulation/devices/xray
    networks:
      - hospital-net
    environment:
      - DEVICE_ID=XRAY_001
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 11112))"]
      interval: 30s
      timeout: 10s
      retries: 3

  heart-monitor:
    build:
      context: ./IoT-Simulation/devices/heart-monitor
    networks:
      - hospital-net
    environment:
      - DEVICE_ID=HR_001
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 2575))"]
      interval: 30s
      timeout: 10s
      retries: 3

  mri-scanner:
    build:
      context: ./IoT-Simulation/devices/mri
    networks:
      - hospital-net
    environment:
      - DEVICE_ID=MRI_001
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 2576))"]
      interval: 30s
      timeout: 10s
      retries: 3

  ultrasound:
    build:
      context: ./IoT-Simulation/devices/ultrasound
    networks:
      - hospital-net
    environment:
      - DEVICE_ID=US_001
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 2577))"]
      interval: 30s
      timeout: 10s
      retries: 3

  infusion-pump:
    build:
      context: ./IoT-Simulation/devices/infusion-pump
    networks:
      - hospital-net
    environment:
      - DEVICE_ID=INF_001
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 2578))"]
      interval: 30s
      timeout: 10s
      retries: 3

  workstation:
    build:
      context: ./IoT-Simulation/vm-terminals
    privileged: true
    cap_add:
      - SYS_ADMIN
    deploy:
      resources:
        limits:
          memory: 4096M
          cpus: '2'
        reservations:
          memory: 4096M
    ports:
      - "5900:5900"
    volumes:
      - ${PWD}/IoT-Simulation/vm-terminals/vm-images:/vm-images
      - workstation-data:/vm-data
    environment:
      - VM_NAME=NURSE_STATION
      - RAM_SIZE=1024
      - CPU_CORES=1
      - MONITORED_DEVICES=XRAY_001,HR_001,MRI_001,US_001,INF_001
    networks:
      - hospital-net

networks:
  hospital-net:
    driver: bridge

volumes:
  postgres_data:
  workstation-data: